{"version":3,"sources":["webpack:///./src/utils/i18n.js","webpack:///./src/templates/blog-post.js"],"names":["codeToLanguage","code","en","pt","zh_TW","BlogPostTemplate","render","post","this","props","data","markdownRemark","siteTitle","site","siteMetadata","title","_this$props$pageConte","pageContext","previous","next","slug","lang","fields","langKey","translations","frontmatter","langs","filter","l","languageLink","rawSlug","replace","targetLang","createLanguageLink","react_default","a","createElement","layout","location","seo","description","excerpt","style","Object","assign","scale","display","marginBottom","rhythm","marginTop","date","length","Fragment","map","i","key","gatsby_browser_entry","to","dangerouslySetInnerHTML","__html","html","bio","flexWrap","justifyContent","listStyle","padding","rel","React","Component","pageQuery"],"mappings":"wLAAaA,SAAiB,SAACC,GAAD,MAAW,CACrCC,GAAI,UACJC,GAAI,YACJC,MAAO,yBACPH,iDCKEI,4FACJC,OAAA,WACE,IAAMC,EAAOC,KAAKC,MAAMC,KAAKC,eACvBC,EAAYJ,KAAKC,MAAMC,KAAKG,KAAKC,aAAaC,MAF7CC,EAG0BR,KAAKC,MAAMQ,YAApCC,EAHDF,EAGCE,SAAUC,EAHXH,EAGWG,KAAMC,EAHjBJ,EAGiBI,KAClBC,EAAOd,EAAKe,OAAOC,QACnBC,GAAgBjB,EAAKkB,YAAYC,OAAS,IAC7CC,OAAO,SAAAC,GAAC,MAAU,OAANA,IAETC,EDZ0B,SAACT,EAAMC,GACvC,IAAMS,EAAUV,EAAKW,QAAWV,EAAhB,IAAyB,IAEzC,OAAO,SAACW,GAAD,MAA+B,OAAfA,EACnBF,EACGE,EAFgB,IAEFF,GCOAG,CAAmBb,EAAMC,GAE9C,OACEa,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,SAAU9B,KAAKC,MAAM6B,SAAUvB,MAAOH,GAC5CsB,EAAAC,EAAAC,cAACG,EAAA,EAAD,CACExB,MAAOR,EAAKkB,YAAYV,MACxByB,YAAajC,EAAKkB,YAAYe,aAAejC,EAAKkC,UAEpDP,EAAAC,EAAAC,cAAA,UAAK7B,EAAKkB,YAAYV,OACtBmB,EAAAC,EAAAC,cAAA,KACEM,MAAKC,OAAAC,OAAA,GACAC,aAAM,IADN,CAEHC,QAAO,QACPC,aAAcC,YAAO,GACrBC,UAAWD,aAAQ,MAGpBzC,EAAKkB,YAAYyB,MAEnB1B,EAAa2B,OAAS,GACrBjB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAiB,SAAA,MACI5B,EAAa2B,OAAS,GAAc,OAAT9B,IAC3Ba,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,gDAAwCZ,EACxC6B,IAAI,SAACzB,EAAG0B,GAAJ,OACHpB,EAAAC,EAAAC,cAACF,EAAAC,EAAMiB,SAAP,CAAgBG,IAAK3B,GAClBA,IAAMP,EACLa,EAAAC,EAAAC,cAAA,SAAIpC,EAAe4B,IACnBM,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAMC,GAAI5B,EAAaD,IAAK5B,EAAe4B,IAE5C0B,IAAM9B,EAAa2B,OAAS,EAAI,GAAMG,IAAM9B,EAAa2B,OAAS,EAAW,IAANG,EAAU,QAAU,SAAY,QAP3G,MAaK,OAATjC,GACCa,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,yBACYF,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAMC,GAAI5B,EAAa,OAAvB,mCAKrBK,EAAAC,EAAAC,cAAA,OAAKsB,wBAAyB,CAAEC,OAAQpD,EAAKqD,QAC7C1B,EAAAC,EAAAC,cAAA,MACEM,MAAO,CACLK,aAAcC,YAAO,MAGzBd,EAAAC,EAAAC,cAACyB,EAAA,EAAD,MAEA3B,EAAAC,EAAAC,cAAA,MACEM,MAAO,CACLI,QAAO,OACPgB,SAAQ,OACRC,eAAc,gBACdC,UAAS,OACTC,QAAS,IAGX/B,EAAAC,EAAAC,cAAA,UACGlB,GACCgB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAMC,GAAIvC,EAASI,OAAOF,KAAM8C,IAAI,QAApC,KACKhD,EAASO,YAAYV,QAI9BmB,EAAAC,EAAAC,cAAA,UACGjB,GACCe,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAMC,GAAItC,EAAKG,OAAOF,KAAM8C,IAAI,QAC7B/C,EAAKM,YAAYV,MADpB,aA7EiBoD,IAAMC,WA0FxBC,GAFEhE,YAEO","file":"component---src-templates-blog-post-js-dc62036d10d0e590f11e.js","sourcesContent":["export const codeToLanguage = (code) => ({\n    en: 'English',\n    pt: 'Português',\n    zh_TW: 'Chinese (Traditional)',\n  }[code])\n  \n  export const createLanguageLink = (slug, lang) => {\n    const rawSlug = slug.replace(`${lang}/`, '')\n  \n    return (targetLang) => targetLang === 'en'\n      ? rawSlug\n      : `${targetLang}/${rawSlug}`\n  }\n","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { rhythm, scale } from \"../utils/typography\"\nimport { codeToLanguage, createLanguageLink } from '../utils/i18n'\n\nclass BlogPostTemplate extends React.Component {\n  render() {\n    const post = this.props.data.markdownRemark\n    const siteTitle = this.props.data.site.siteMetadata.title\n    const { previous, next, slug } = this.props.pageContext\n    const lang = post.fields.langKey\n    const translations = (post.frontmatter.langs || [])\n      .filter(l => l !== 'en')\n\n    const languageLink = createLanguageLink(slug, lang)\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO\n          title={post.frontmatter.title}\n          description={post.frontmatter.description || post.excerpt}\n        />\n        <h1>{post.frontmatter.title}</h1>\n        <p\n          style={{\n            ...scale(-1 / 5),\n            display: `block`,\n            marginBottom: rhythm(1),\n            marginTop: rhythm(-1),\n          }}\n        >\n          {post.frontmatter.date}\n        </p>\n        {translations.length > 0 &&\n          <>\n            {(translations.length > 1 || lang === 'en') &&\n              <p><i>This article is also available into {translations\n                .map((l, i) => (\n                  <React.Fragment key={l}>\n                    {l === lang ?\n                      <b>{codeToLanguage(l)}</b> :\n                      <Link to={languageLink(l)}>{codeToLanguage(l)}</Link>\n                    }\n                    {i === translations.length - 1 ? '' : (i === translations.length - 2 ? (i === 0 ? ' and ' : ', and ') : ', ')}\n                  </React.Fragment>\n                ))\n              }.\n              </i></p>\n            }\n            {lang !== 'en' &&\n              <p><i>\n                You can also <Link to={languageLink('en')}>read the original in English</Link>\n              </i></p>\n            }\n          </>\n        }\n        <div dangerouslySetInnerHTML={{ __html: post.html }} />\n        <hr\n          style={{\n            marginBottom: rhythm(1),\n          }}\n        />\n        <Bio />\n\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </Layout>\n    )\n  }\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n        author\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n        langs\n      }\n      fields {\n        slug\n        langKey\n      }\n    }\n  }\n`\n"],"sourceRoot":""}